{"backend_state":"init","connection_file":"/projects/9113e775-cb7d-4896-a6d4-712f9995a700/.local/share/jupyter/runtime/kernel-c018822a-9399-4af6-91a1-c6612b37a4cf.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"DS_Merged_Data_Exploration.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4b520e","input":"country_data['Country'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RwsIgKNx4fE_","outputId":"b81cfcd6-d0e0-4156-ac68-039bd052d4e3"},"output":{"0":{"data":{"text/plain":"array(['Afghanistan ', 'Albania ', 'Algeria ', 'American Samoa ',\n       'Andorra ', 'Angola ', 'Anguilla ', 'Antigua & Barbuda ',\n       'Argentina ', 'Armenia ', 'Aruba ', 'Australia ', 'Austria ',\n       'Azerbaijan ', 'Bahamas, The ', 'Bahrain ', 'Bangladesh ',\n       'Barbados ', 'Belarus ', 'Belgium ', 'Belize ', 'Benin ',\n       'Bermuda ', 'Bhutan ', 'Bolivia ', 'Bosnia & Herzegovina ',\n       'Botswana ', 'Brazil ', 'British Virgin Is. ', 'Brunei ',\n       'Bulgaria ', 'Burkina Faso ', 'Burma ', 'Burundi ', 'Cambodia ',\n       'Cameroon ', 'Canada ', 'Cape Verde ', 'Cayman Islands ',\n       'Central African Rep. ', 'Chad ', 'Chile ', 'China ', 'Colombia ',\n       'Comoros ', 'Congo, Dem. Rep. ', 'Congo, Repub. of the ',\n       'Cook Islands ', 'Costa Rica ', \"Cote d'Ivoire \", 'Croatia ',\n       'Cuba ', 'Cyprus ', 'Czech Republic ', 'Denmark ', 'Djibouti ',\n       'Dominica ', 'Dominican Republic ', 'East Timor ', 'Ecuador ',\n       'Egypt ', 'El Salvador ', 'Equatorial Guinea ', 'Eritrea ',\n       'Estonia ', 'Ethiopia ', 'Faroe Islands ', 'Fiji ', 'Finland ',\n       'France ', 'French Guiana ', 'French Polynesia ', 'Gabon ',\n       'Gambia, The ', 'Gaza Strip ', 'Georgia ', 'Germany ', 'Ghana ',\n       'Gibraltar ', 'Greece ', 'Greenland ', 'Grenada ', 'Guadeloupe ',\n       'Guam ', 'Guatemala ', 'Guernsey ', 'Guinea ', 'Guinea-Bissau ',\n       'Guyana ', 'Haiti ', 'Honduras ', 'Hong Kong ', 'Hungary ',\n       'Iceland ', 'India ', 'Indonesia ', 'Iran ', 'Iraq ', 'Ireland ',\n       'Isle of Man ', 'Israel ', 'Italy ', 'Jamaica ', 'Japan ',\n       'Jersey ', 'Jordan ', 'Kazakhstan ', 'Kenya ', 'Kiribati ',\n       'Korea, North ', 'Korea, South ', 'Kuwait ', 'Kyrgyzstan ',\n       'Laos ', 'Latvia ', 'Lebanon ', 'Lesotho ', 'Liberia ', 'Libya ',\n       'Liechtenstein ', 'Lithuania ', 'Luxembourg ', 'Macau ',\n       'Macedonia ', 'Madagascar ', 'Malawi ', 'Malaysia ', 'Maldives ',\n       'Mali ', 'Malta ', 'Marshall Islands ', 'Martinique ',\n       'Mauritania ', 'Mauritius ', 'Mayotte ', 'Mexico ',\n       'Micronesia, Fed. St. ', 'Moldova ', 'Monaco ', 'Mongolia ',\n       'Montserrat ', 'Morocco ', 'Mozambique ', 'Namibia ', 'Nauru ',\n       'Nepal ', 'Netherlands ', 'Netherlands Antilles ',\n       'New Caledonia ', 'New Zealand ', 'Nicaragua ', 'Niger ',\n       'Nigeria ', 'N. Mariana Islands ', 'Norway ', 'Oman ', 'Pakistan ',\n       'Palau ', 'Panama ', 'Papua New Guinea ', 'Paraguay ', 'Peru ',\n       'Philippines ', 'Poland ', 'Portugal ', 'Puerto Rico ', 'Qatar ',\n       'Reunion ', 'Romania ', 'Russia ', 'Rwanda ', 'Saint Helena ',\n       'Saint Kitts & Nevis ', 'Saint Lucia ', 'St Pierre & Miquelon ',\n       'Saint Vincent and the Grenadines ', 'Samoa ', 'San Marino ',\n       'Sao Tome & Principe ', 'Saudi Arabia ', 'Senegal ', 'Serbia ',\n       'Seychelles ', 'Sierra Leone ', 'Singapore ', 'Slovakia ',\n       'Slovenia ', 'Solomon Islands ', 'Somalia ', 'South Africa ',\n       'Spain ', 'Sri Lanka ', 'Sudan ', 'Suriname ', 'Swaziland ',\n       'Sweden ', 'Switzerland ', 'Syria ', 'Taiwan ', 'Tajikistan ',\n       'Tanzania ', 'Thailand ', 'Togo ', 'Tonga ', 'Trinidad & Tobago ',\n       'Tunisia ', 'Turkey ', 'Turkmenistan ', 'Turks & Caicos Is ',\n       'Tuvalu ', 'Uganda ', 'Ukraine ', 'United Arab Emirates ',\n       'United Kingdom ', 'United States ', 'Uruguay ', 'Uzbekistan ',\n       'Vanuatu ', 'Venezuela ', 'Vietnam ', 'Virgin Islands ',\n       'Wallis and Futuna ', 'West Bank ', 'Western Sahara ', 'Yemen ',\n       'Zambia ', 'Zimbabwe '], dtype=object)"},"exec_count":0,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"58628f","input":"country_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2zNUC9_u399m","outputId":"f2d8efca-1bf3-4ab8-c2a6-ea571389d89d"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 227 entries, 0 to 226\nData columns (total 20 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             227 non-null    object \n 1   Region                              227 non-null    object \n 2   Population                          227 non-null    int64  \n 3   Area (sq. mi.)                      227 non-null    int64  \n 4   Pop. Density (per sq. mi.)          227 non-null    float64\n 5   Coastline (coast/area ratio)        227 non-null    float64\n 6   Net migration                       224 non-null    float64\n 7   Infant mortality (per 1000 births)  224 non-null    float64\n 8   GDP ($ per capita)                  226 non-null    float64\n 9   Literacy (%)                        209 non-null    float64\n 10  Phones (per 1000)                   223 non-null    float64\n 11  Arable (%)                          225 non-null    float64\n 12  Crops (%)                           225 non-null    float64\n 13  Other (%)                           225 non-null    float64\n 14  Climate                             205 non-null    float64\n 15  Birthrate                           224 non-null    float64\n 16  Deathrate                           223 non-null    float64\n 17  Agriculture                         212 non-null    float64\n 18  Industry                            211 non-null    float64\n 19  Service                             212 non-null    float64\ndtypes: float64(16), int64(2), object(2)\nmemory usage: 35.6+ KB\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"59f402","input":"","pos":82,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e6681d","input":"for name in country_names:\n  if name not in height_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GuRpalNM5B5X","outputId":"9c606327-561c-4d50-d9c4-b9c8f78950b3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Anguilla\nAntigua & Barbuda\nAruba\nBahamas, The\nBosnia & Herzegovina\nBritish Virgin Is.\nBurma\nCape Verde\nCayman Islands\nCentral African Rep.\nCongo, Dem. Rep.\nCongo, Repub. of the\nCote d'Ivoire\nEast Timor\nFaroe Islands\nFrench Guiana\nGambia, The\nGaza Strip\nGibraltar\nGuadeloupe\nGuam\nGuernsey\nIsle of Man\nJersey\nKorea, North\nKorea, South\nLiechtenstein\nMacau\nMacedonia\nMartinique\nMayotte\nMicronesia, Fed. St.\nMonaco\nMontserrat\nN. Mariana Islands\nNetherlands Antilles\nNew Caledonia\nReunion\nSaint Helena\nSaint Kitts & Nevis\nSan Marino\nSao Tome & Principe\nSt Pierre & Miquelon\nSwaziland\nTrinidad & Tobago\nTurks & Caicos Is\nVirgin Islands\nWallis and Futuna\nWest Bank\nWestern Sahara\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"eafd90","input":"height_data = pd.read_csv('Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('countries of the world.csv', decimal=',')\n\ncountry_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"V_TGMclo0kaz","outputId":"52f8df62-920e-4676-fca4-072ef86614a7"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>Phones (per 1000)</th>\n      <th>Arable (%)</th>\n      <th>Crops (%)</th>\n      <th>Other (%)</th>\n      <th>Climate</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA (EX. NEAR EAST)</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>3.2</td>\n      <td>12.13</td>\n      <td>0.22</td>\n      <td>87.65</td>\n      <td>1.0</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>71.2</td>\n      <td>21.09</td>\n      <td>4.42</td>\n      <td>74.49</td>\n      <td>3.0</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>78.1</td>\n      <td>3.22</td>\n      <td>0.25</td>\n      <td>96.53</td>\n      <td>1.0</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>259.5</td>\n      <td>10.00</td>\n      <td>15.00</td>\n      <td>75.00</td>\n      <td>2.0</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>497.2</td>\n      <td>2.22</td>\n      <td>0.00</td>\n      <td>97.78</td>\n      <td>3.0</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           Country                               Region  Population  \\\n0     Afghanistan         ASIA (EX. NEAR EAST)             31056997   \n1         Albania   EASTERN EUROPE                          3581655   \n2         Algeria   NORTHERN AFRICA                        32930091   \n3  American Samoa   OCEANIA                                   57794   \n4         Andorra   WESTERN EUROPE                            71201   \n\n   Area (sq. mi.)  Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  \\\n0          647500                        48.0                          0.00   \n1           28748                       124.6                          1.26   \n2         2381740                        13.8                          0.04   \n3             199                       290.4                         58.29   \n4             468                       152.1                          0.00   \n\n   Net migration  Infant mortality (per 1000 births)  GDP ($ per capita)  \\\n0          23.06                              163.07               700.0   \n1          -4.93                               21.52              4500.0   \n2          -0.39                               31.00              6000.0   \n3         -20.71                                9.27              8000.0   \n4           6.60                                4.05             19000.0   \n\n   Literacy (%)  Phones (per 1000)  Arable (%)  Crops (%)  Other (%)  Climate  \\\n0          36.0                3.2       12.13       0.22      87.65      1.0   \n1          86.5               71.2       21.09       4.42      74.49      3.0   \n2          70.0               78.1        3.22       0.25      96.53      1.0   \n3          97.0              259.5       10.00      15.00      75.00      2.0   \n4         100.0              497.2        2.22       0.00      97.78      3.0   \n\n   Birthrate  Deathrate  Agriculture  Industry  Service  \n0      46.60      20.34        0.380     0.240    0.380  \n1      15.11       5.22        0.232     0.188    0.579  \n2      17.14       4.61        0.101     0.600    0.298  \n3      22.46       3.27          NaN       NaN      NaN  \n4       8.71       6.25          NaN       NaN      NaN  "},"exec_count":10,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"2c77e4","input":"height_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"keJgCSRj3hVn","outputId":"88ac4728-f5c5-43d0-d94f-cc6de1349573"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rank</th>\n      <th>Country Name</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Netherlands</td>\n      <td>183.78</td>\n      <td>170.36</td>\n      <td>6.03</td>\n      <td>5.59</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Montenegro</td>\n      <td>183.30</td>\n      <td>169.96</td>\n      <td>6.01</td>\n      <td>5.58</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Estonia</td>\n      <td>182.79</td>\n      <td>168.66</td>\n      <td>6.00</td>\n      <td>5.53</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Bosnia and Herzegovina</td>\n      <td>182.47</td>\n      <td>167.47</td>\n      <td>5.99</td>\n      <td>5.49</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Iceland</td>\n      <td>182.10</td>\n      <td>168.91</td>\n      <td>5.97</td>\n      <td>5.54</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Rank            Country Name  Male Height in Cm  Female Height in Cm  \\\n0     1             Netherlands             183.78               170.36   \n1     2              Montenegro             183.30               169.96   \n2     3                 Estonia             182.79               168.66   \n3     4  Bosnia and Herzegovina             182.47               167.47   \n4     5                 Iceland             182.10               168.91   \n\n   Male Height in Ft  Female Height in Ft  \n0               6.03                 5.59  \n1               6.01                 5.58  \n2               6.00                 5.53  \n3               5.99                 5.49  \n4               5.97                 5.54  "},"exec_count":11,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"623739","input":"height_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZS6sY5zb39mu","outputId":"f7a309f5-327e-4a24-fa47-16030284229e"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 199 entries, 0 to 198\nData columns (total 6 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   Rank                 199 non-null    int64  \n 1   Country Name         199 non-null    object \n 2   Male Height in Cm    199 non-null    float64\n 3   Female Height in Cm  199 non-null    float64\n 4   Male Height in Ft    199 non-null    float64\n 5   Female Height in Ft  199 non-null    float64\ndtypes: float64(4), int64(1), object(1)\nmemory usage: 9.5+ KB\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"c0baee","input":"height_data = height_data.rename(columns={\"Country Name\" : \"Country\"})","metadata":{"id":"0Ifn-xvv3rtE"},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"a29c0e","input":"merged_df = pd.merge(country_data, height_data, on=['Country'])\nmerged_df.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":192},"id":"eAeij1Oq356E","outputId":"12d89852-7d76-47a5-b8e6-bd12f206d589"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n<p>0 rows × 25 columns</p>\n</div>","text/plain":"Empty DataFrame\nColumns: [Country, Region, Population, Area (sq. mi.), Pop. Density (per sq. mi.), Coastline (coast/area ratio), Net migration, Infant mortality (per 1000 births), GDP ($ per capita), Literacy (%), Phones (per 1000), Arable (%), Crops (%), Other (%), Climate, Birthrate, Deathrate, Agriculture, Industry, Service, Rank, Male Height in Cm, Female Height in Cm, Male Height in Ft, Female Height in Ft]\nIndex: []\n\n[0 rows x 25 columns]"},"exec_count":14,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"c102e0","input":"height_data['Country'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPtZVUAv35qO","outputId":"c9a153b2-46cb-41f7-d7f3-9797e28aba82"},"output":{"0":{"data":{"text/plain":"array(['Netherlands', 'Montenegro', 'Estonia', 'Bosnia and Herzegovina',\n       'Iceland', 'Denmark', 'Czech Republic', 'Latvia', 'Slovakia',\n       'Slovenia', 'Ukraine', 'Croatia', 'Serbia', 'Lithuania', 'Poland',\n       'Finland', 'Norway', 'Sweden', 'Germany', 'Dominica', 'Bermuda',\n       'Puerto Rico', 'Greece', 'Belgium', 'Ireland', 'Lebanon',\n       'Andorra', 'Antigua and Barbuda', 'Australia', 'Canada',\n       'Switzerland', 'Grenada', 'Belarus', 'France', 'Austria',\n       'Luxembourg', 'Cook Islands', 'French Polynesia', 'United Kingdom',\n       'Romania', 'New Zealand', 'Saint Vincent and the Grenadines',\n       'Niue', 'American Samoa', 'Barbados', 'Jamaica', 'United States',\n       'Tunisia', 'Russia', 'Hungary', 'Saint Lucia', 'North Macedonia',\n       'Libya', 'Turkey', 'Morocco', 'Senegal', 'Spain', 'Tokelau',\n       'Trinidad and Tobago', 'Israel', 'Georgia', 'Seychelles', 'Brazil',\n       'China', 'Iran', 'Moldova', 'South Korea', 'Kazakhstan', 'Tonga',\n       'Palestine', 'Algeria', 'Mali', 'Kuwait', 'Jordan', 'Hong Kong',\n       'Argentina', 'North Korea', 'Dominican Republic', 'Egypt',\n       'Suriname', 'Italy', 'Samoa', 'Bahamas', 'Malta', 'Turkmenistan',\n       'Portugal', 'Uruguay', 'Bulgaria', 'United Arab Emirates',\n       'Albania', 'Costa Rica', 'Azerbaijan', 'Fiji', 'Greenland',\n       'Paraguay', 'Iraq', 'Saint Kitts and Nevis', 'Armenia', 'Cuba',\n       'Venezuela', 'Taiwan', 'Singapore', 'Qatar', 'Botswana',\n       'Mauritius', 'Chile', 'Bahrain', 'Cyprus', 'Haiti', 'Guyana',\n       'Cameroon', 'Sudan', 'Japan', 'Burkina Faso', 'Colombia', 'Chad',\n       'Oman', 'Kyrgyzstan', 'Syria', 'Thailand', 'Nigeria', 'Tuvalu',\n       'Republic of the Congo', 'Somalia', 'Uzbekistan', 'Djibouti',\n       'Guinea', 'Zimbabwe', 'Mongolia', 'El Salvador', 'Saudi Arabia',\n       'Palau', 'Eritrea', 'Belize', 'Gabon', 'Kenya',\n       'Sao Tome and Principe', 'Ghana', 'Mexico', 'Niger', 'Panama',\n       'Togo', 'Kiribati', 'Nicaragua', 'Namibia', 'South Africa',\n       'Honduras', 'Micronesia', 'Nauru', 'Eswatini', 'Malaysia',\n       'Central African Republic', 'Vietnam', 'Ethiopia', 'Uganda',\n       'DR Congo', 'Afghanistan', 'Angola', 'Benin', 'Tajikistan',\n       'Gambia', 'Vanuatu', 'Ivory Coast', 'Equatorial Guinea',\n       'Guinea-Bissau', 'Bolivia', 'Sri Lanka', 'Lesotho', 'Maldives',\n       'Comoros', 'Zambia', 'Burundi', 'Pakistan', 'Ecuador', 'Bhutan',\n       'Tanzania', 'Peru', 'Myanmar', 'India', 'Sierra Leone', 'Brunei',\n       'Indonesia', 'Rwanda', 'Malawi', 'Mauritania', 'Liberia',\n       'Cambodia', 'Marshall Islands', 'Philippines', 'Madagascar',\n       'Bangladesh', 'Yemen', 'Nepal', 'Guatemala', 'Mozambique',\n       'Papua New Guinea', 'Solomon Islands', 'Laos', 'Timor-Leste'],\n      dtype=object)"},"exec_count":15,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"24618a","input":"merged_df = pd.merge(country_data, height_data, on=['Country'])\nmerged_df.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"CsNoQdVb6V1Z","outputId":"67755271-1a9d-4daa-d66c-71c02d9a3859"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA (EX. NEAR EAST)</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>...</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n      <td>157</td>\n      <td>168.50</td>\n      <td>156.11</td>\n      <td>5.53</td>\n      <td>5.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>...</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n      <td>90</td>\n      <td>174.07</td>\n      <td>162.23</td>\n      <td>5.71</td>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>...</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n      <td>71</td>\n      <td>175.04</td>\n      <td>162.35</td>\n      <td>5.74</td>\n      <td>5.33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>...</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>44</td>\n      <td>177.09</td>\n      <td>167.55</td>\n      <td>5.81</td>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>...</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>27</td>\n      <td>178.84</td>\n      <td>165.53</td>\n      <td>5.87</td>\n      <td>5.43</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"          Country                               Region  Population  \\\n0     Afghanistan        ASIA (EX. NEAR EAST)             31056997   \n1         Albania  EASTERN EUROPE                          3581655   \n2         Algeria  NORTHERN AFRICA                        32930091   \n3  American Samoa  OCEANIA                                   57794   \n4         Andorra  WESTERN EUROPE                            71201   \n\n   Area (sq. mi.)  Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  \\\n0          647500                        48.0                          0.00   \n1           28748                       124.6                          1.26   \n2         2381740                        13.8                          0.04   \n3             199                       290.4                         58.29   \n4             468                       152.1                          0.00   \n\n   Net migration  Infant mortality (per 1000 births)  GDP ($ per capita)  \\\n0          23.06                              163.07               700.0   \n1          -4.93                               21.52              4500.0   \n2          -0.39                               31.00              6000.0   \n3         -20.71                                9.27              8000.0   \n4           6.60                                4.05             19000.0   \n\n   Literacy (%)  ...  Birthrate  Deathrate  Agriculture  Industry  Service  \\\n0          36.0  ...      46.60      20.34        0.380     0.240    0.380   \n1          86.5  ...      15.11       5.22        0.232     0.188    0.579   \n2          70.0  ...      17.14       4.61        0.101     0.600    0.298   \n3          97.0  ...      22.46       3.27          NaN       NaN      NaN   \n4         100.0  ...       8.71       6.25          NaN       NaN      NaN   \n\n   Rank  Male Height in Cm  Female Height in Cm  Male Height in Ft  \\\n0   157             168.50               156.11               5.53   \n1    90             174.07               162.23               5.71   \n2    71             175.04               162.35               5.74   \n3    44             177.09               167.55               5.81   \n4    27             178.84               165.53               5.87   \n\n   Female Height in Ft  \n0                 5.12  \n1                 5.32  \n2                 5.33  \n3                 5.50  \n4                 5.43  \n\n[5 rows x 25 columns]"},"exec_count":16,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"59f20e","input":"country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)","metadata":{"id":"OHFCnlXX4iJb"},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"d624ba","input":"country_data['Country'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0oYtxAs74qiF","outputId":"fe6fb05e-d448-4bb1-87dd-a2b46a581fda"},"output":{"0":{"data":{"text/plain":"array(['Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra',\n       'Angola', 'Anguilla', 'Antigua & Barbuda', 'Argentina', 'Armenia',\n       'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas, The',\n       'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium',\n       'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n       'Bosnia & Herzegovina', 'Botswana', 'Brazil', 'British Virgin Is.',\n       'Brunei', 'Bulgaria', 'Burkina Faso', 'Burma', 'Burundi',\n       'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands',\n       'Central African Rep.', 'Chad', 'Chile', 'China', 'Colombia',\n       'Comoros', 'Congo, Dem. Rep.', 'Congo, Repub. of the',\n       'Cook Islands', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba',\n       'Cyprus', 'Czech Republic', 'Denmark', 'Djibouti', 'Dominica',\n       'Dominican Republic', 'East Timor', 'Ecuador', 'Egypt',\n       'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia',\n       'Ethiopia', 'Faroe Islands', 'Fiji', 'Finland', 'France',\n       'French Guiana', 'French Polynesia', 'Gabon', 'Gambia, The',\n       'Gaza Strip', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece',\n       'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala',\n       'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti',\n       'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India',\n       'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel',\n       'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan',\n       'Kenya', 'Kiribati', 'Korea, North', 'Korea, South', 'Kuwait',\n       'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia',\n       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macau',\n       'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n       'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania',\n       'Mauritius', 'Mayotte', 'Mexico', 'Micronesia, Fed. St.',\n       'Moldova', 'Monaco', 'Mongolia', 'Montserrat', 'Morocco',\n       'Mozambique', 'Namibia', 'Nauru', 'Nepal', 'Netherlands',\n       'Netherlands Antilles', 'New Caledonia', 'New Zealand',\n       'Nicaragua', 'Niger', 'Nigeria', 'N. Mariana Islands', 'Norway',\n       'Oman', 'Pakistan', 'Palau', 'Panama', 'Papua New Guinea',\n       'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal',\n       'Puerto Rico', 'Qatar', 'Reunion', 'Romania', 'Russia', 'Rwanda',\n       'Saint Helena', 'Saint Kitts & Nevis', 'Saint Lucia',\n       'St Pierre & Miquelon', 'Saint Vincent and the Grenadines',\n       'Samoa', 'San Marino', 'Sao Tome & Principe', 'Saudi Arabia',\n       'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore',\n       'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia',\n       'South Africa', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname',\n       'Swaziland', 'Sweden', 'Switzerland', 'Syria', 'Taiwan',\n       'Tajikistan', 'Tanzania', 'Thailand', 'Togo', 'Tonga',\n       'Trinidad & Tobago', 'Tunisia', 'Turkey', 'Turkmenistan',\n       'Turks & Caicos Is', 'Tuvalu', 'Uganda', 'Ukraine',\n       'United Arab Emirates', 'United Kingdom', 'United States',\n       'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n       'Virgin Islands', 'Wallis and Futuna', 'West Bank',\n       'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe'], dtype=object)"},"exec_count":17,"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"be8861","input":"country_names = country_data['Country'].unique()\ncountry_names.sort()\nheight_names = height_data['Country'].unique()\nheight_names.sort()\nfor name in height_names:\n  if name not in country_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tnRQ9UX54qbr","outputId":"694732dc-a5de-4f97-a382-505fe4d43ac3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Antigua and Barbuda\nBahamas\nBosnia and Herzegovina\nCentral African Republic\nDR Congo\nEswatini\nGambia\nIvory Coast\nMicronesia\nMontenegro\nMyanmar\nNiue\nNorth Korea\nNorth Macedonia\nPalestine\nRepublic of the Congo\nSaint Kitts and Nevis\nSao Tome and Principe\nSouth Korea\nTimor-Leste\nTokelau\nTrinidad and Tobago\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"3e6e71","input":"old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\nnew_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n             'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n             'Timor-Leste', 'Trinidad and Tobago']\n\nfor i in range(len(old_names)):\n  country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n","metadata":{"id":"N8RWcR9L5dDA"},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"66074c","input":"country_names = country_data['Country'].unique()\ncountry_names.sort()\nheight_names = height_data['Country'].unique()\nheight_names.sort()\nfor name in height_names:\n  if name not in country_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5i6GPDoY6Uzo","outputId":"c82f632d-ab99-46ff-cbf7-5104b5aafe14"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Montenegro\nNiue\nPalestine\nTokelau\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"dddfba","input":"merged_df.info()","metadata":{"id":"OlNxCwf76i-j"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 0 entries\nData columns (total 25 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             0 non-null      object \n 1   Region                              0 non-null      object \n 2   Population                          0 non-null      int64  \n 3   Area (sq. mi.)                      0 non-null      int64  \n 4   Pop. Density (per sq. mi.)          0 non-null      float64\n 5   Coastline (coast/area ratio)        0 non-null      float64\n 6   Net migration                       0 non-null      float64\n 7   Infant mortality (per 1000 births)  0 non-null      float64\n 8   GDP ($ per capita)                  0 non-null      float64\n 9   Literacy (%)                        0 non-null      float64\n 10  Phones (per 1000)                   0 non-null      float64\n 11  Arable (%)                          0 non-null      float64\n 12  Crops (%)                           0 non-null      float64\n 13  Other (%)                           0 non-null      float64\n 14  Climate                             0 non-null      float64\n 15  Birthrate                           0 non-null      float64\n 16  Deathrate                           0 non-null      float64\n 17  Agriculture                         0 non-null      float64\n 18  Industry                            0 non-null      float64\n 19  Service                             0 non-null      float64\n 20  Rank                                0 non-null      int64  \n 21  Male Height in Cm                   0 non-null      float64\n 22  Female Height in Cm                 0 non-null      float64\n 23  Male Height in Ft                   0 non-null      float64\n 24  Female Height in Ft                 0 non-null      float64\ndtypes: float64(20), int64(3), object(2)\nmemory usage: 0.0+ bytes\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"16bceb","input":"merged_df['Region'].unique()","metadata":{"id":"--DZIrIr6jba"},"output":{"0":{"data":{"text/plain":"array([], dtype=object)"},"exec_count":22,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"5d2b54","input":"def merge_data(country_data, height_data):\n  height_data = height_data.rename(columns={\"Country Name\" : \"Country\"})\n  country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)\n  old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\n  new_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n              'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n              'Timor-Leste', 'Trinidad and Tobago']\n\n  for i in range(len(old_names)):\n    country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n  \n  merged_df = pd.merge(country_data, height_data, on=['Country'])\n  return merged_df","metadata":{"id":"asMRjau16oCF"},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"60be17","input":"height_data = pd.read_csv('Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('countries of the world.csv', decimal=',')\nmerged_df = merge_data(country_data, height_data)","metadata":{"id":"M7mvuoXM6ogD"},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"7fd2d3","input":"import numpy as np\nimport pandas as pd","metadata":{"id":"JkJxqO-S7o5N"},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"40ab5c","input":"height_data = pd.read_csv('Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('countries of the world.csv', decimal=',')\nmerged_data = merge_data(country_data, height_data)\n\nmerged_data['Region'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bh7iWFLH7j6l","outputId":"a6a7f62a-9104-45f4-db13-5544243974d3"},"output":{"0":{"data":{"text/plain":"array(['ASIA (EX. NEAR EAST)         ',\n       'EASTERN EUROPE                     ',\n       'NORTHERN AFRICA                    ',\n       'OCEANIA                            ',\n       'WESTERN EUROPE                     ',\n       'SUB-SAHARAN AFRICA                 ', 'LATIN AMER. & CARIB    ',\n       'C.W. OF IND. STATES ', 'NEAR EAST                          ',\n       'NORTHERN AMERICA                   ',\n       'BALTICS                            '], dtype=object)"},"exec_count":26,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"b51bec","input":"merged_data['Region'] = merged_data.apply(lambda row : row.astype(str)['Region'].strip(), axis=1)\nmerged_data['Region'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJc59_eK7kQ3","outputId":"a0f544da-efb8-4e36-f43a-e19b833b6892"},"output":{"0":{"data":{"text/plain":"array(['ASIA (EX. NEAR EAST)', 'EASTERN EUROPE', 'NORTHERN AFRICA',\n       'OCEANIA', 'WESTERN EUROPE', 'SUB-SAHARAN AFRICA',\n       'LATIN AMER. & CARIB', 'C.W. OF IND. STATES', 'NEAR EAST',\n       'NORTHERN AMERICA', 'BALTICS'], dtype=object)"},"exec_count":27,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"65ddf5","input":"def rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region","metadata":{"id":"4YLyEpTN7kON"},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"87f16e","input":"merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\nmerged_data['Region'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lf9b5NNN7zJa","outputId":"18af34be-b4cd-4734-916b-3779acd6559e"},"output":{"0":{"data":{"text/plain":"array(['ASIA', 'EASTERN EUROPE', 'NORTHERN AFRICA', 'OCEANIA',\n       'WESTERN EUROPE', 'SUB-SAHARAN AFRICA', 'LATIN AMER. & CARIB',\n       'C.W.I. STATES', 'MIDDLE EAST', 'NORTHERN AMERICA', 'BALTICS'],\n      dtype=object)"},"exec_count":29,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"c32da6","input":"merged_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U55Sbdrj75JE","outputId":"952d45f0-67b2-499a-d555-6ff5bd1b2edd"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 195 entries, 0 to 194\nData columns (total 25 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             195 non-null    object \n 1   Region                              195 non-null    object \n 2   Population                          195 non-null    int64  \n 3   Area (sq. mi.)                      195 non-null    int64  \n 4   Pop. Density (per sq. mi.)          195 non-null    float64\n 5   Coastline (coast/area ratio)        195 non-null    float64\n 6   Net migration                       195 non-null    float64\n 7   Infant mortality (per 1000 births)  195 non-null    float64\n 8   GDP ($ per capita)                  195 non-null    float64\n 9   Literacy (%)                        195 non-null    float64\n 10  Phones (per 1000)                   195 non-null    float64\n 11  Arable (%)                          195 non-null    float64\n 12  Crops (%)                           195 non-null    float64\n 13  Other (%)                           195 non-null    float64\n 14  Climate                             179 non-null    float64\n 15  Birthrate                           195 non-null    float64\n 16  Deathrate                           195 non-null    float64\n 17  Agriculture                         195 non-null    float64\n 18  Industry                            195 non-null    float64\n 19  Service                             195 non-null    float64\n 20  Rank                                195 non-null    int64  \n 21  Male Height in Cm                   195 non-null    float64\n 22  Female Height in Cm                 195 non-null    float64\n 23  Male Height in Ft                   195 non-null    float64\n 24  Female Height in Ft                 195 non-null    float64\ndtypes: float64(20), int64(3), object(2)\nmemory usage: 39.6+ KB\n"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"f38819","input":"merged_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"07eDae_p7zBH","outputId":"3612d2b0-6444-41a0-96bd-605d59991d99"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 195 entries, 0 to 194\nData columns (total 25 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             195 non-null    object \n 1   Region                              195 non-null    object \n 2   Population                          195 non-null    int64  \n 3   Area (sq. mi.)                      195 non-null    int64  \n 4   Pop. Density (per sq. mi.)          195 non-null    float64\n 5   Coastline (coast/area ratio)        195 non-null    float64\n 6   Net migration                       194 non-null    float64\n 7   Infant mortality (per 1000 births)  194 non-null    float64\n 8   GDP ($ per capita)                  195 non-null    float64\n 9   Literacy (%)                        187 non-null    float64\n 10  Phones (per 1000)                   193 non-null    float64\n 11  Arable (%)                          195 non-null    float64\n 12  Crops (%)                           195 non-null    float64\n 13  Other (%)                           195 non-null    float64\n 14  Climate                             179 non-null    float64\n 15  Birthrate                           194 non-null    float64\n 16  Deathrate                           193 non-null    float64\n 17  Agriculture                         191 non-null    float64\n 18  Industry                            191 non-null    float64\n 19  Service                             191 non-null    float64\n 20  Rank                                195 non-null    int64  \n 21  Male Height in Cm                   195 non-null    float64\n 22  Female Height in Cm                 195 non-null    float64\n 23  Male Height in Ft                   195 non-null    float64\n 24  Female Height in Ft                 195 non-null    float64\ndtypes: float64(20), int64(3), object(2)\nmemory usage: 39.6+ KB\n"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"ed6763","input":"for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XIQkxUEY732l","outputId":"239ca089-e76a-4d5e-fc80-eb4f9f478e02"},"output":{"0":{"name":"stderr","output_type":"stream","text":"<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"1":{"name":"stderr","output_type":"stream","text":"<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"2":{"name":"stderr","output_type":"stream","text":"<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-31-012b71fee181>:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"59ce67","input":"def rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region\n\ndef format_and_clean_data(merged_data):\n\n  merged_data['Region'] = merged_data.apply(lambda row : row.astype(str)['Region'].strip(), axis=1)\n  merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\n\n  for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n\n  return merged_data","metadata":{"id":"wDwmIgFl75GZ"},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"5879a0","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","metadata":{"id":"N95b4GvK8rLY"},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"5fbabb","input":"height_data = pd.read_csv('Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('countries of the world.csv', decimal=',')\n\nmerged_data = merge_data(country_data, height_data)\nmerged_data = format_and_clean_data(merged_data)\nmerged_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"EKVOtwWu9i8F","outputId":"e8e37fc1-54c8-46b3-b18f-bd4e0361fc27"},"output":{"0":{"name":"stderr","output_type":"stream","text":"<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"1":{"name":"stderr","output_type":"stream","text":"<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"2":{"name":"stderr","output_type":"stream","text":"<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"3":{"name":"stderr","output_type":"stream","text":"<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n<ipython-input-32-a8752ee3f009>:29: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n"},"4":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>...</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n      <td>157</td>\n      <td>168.50</td>\n      <td>156.11</td>\n      <td>5.53</td>\n      <td>5.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>...</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n      <td>90</td>\n      <td>174.07</td>\n      <td>162.23</td>\n      <td>5.71</td>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>...</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n      <td>71</td>\n      <td>175.04</td>\n      <td>162.35</td>\n      <td>5.74</td>\n      <td>5.33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>...</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>0.151</td>\n      <td>0.190</td>\n      <td>0.620</td>\n      <td>44</td>\n      <td>177.09</td>\n      <td>167.55</td>\n      <td>5.81</td>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>...</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>0.021</td>\n      <td>0.274</td>\n      <td>0.707</td>\n      <td>27</td>\n      <td>178.84</td>\n      <td>165.53</td>\n      <td>5.87</td>\n      <td>5.43</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"          Country           Region  Population  Area (sq. mi.)  \\\n0     Afghanistan             ASIA    31056997          647500   \n1         Albania   EASTERN EUROPE     3581655           28748   \n2         Algeria  NORTHERN AFRICA    32930091         2381740   \n3  American Samoa          OCEANIA       57794             199   \n4         Andorra   WESTERN EUROPE       71201             468   \n\n   Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  Net migration  \\\n0                        48.0                          0.00          23.06   \n1                       124.6                          1.26          -4.93   \n2                        13.8                          0.04          -0.39   \n3                       290.4                         58.29         -20.71   \n4                       152.1                          0.00           6.60   \n\n   Infant mortality (per 1000 births)  GDP ($ per capita)  Literacy (%)  ...  \\\n0                              163.07               700.0          36.0  ...   \n1                               21.52              4500.0          86.5  ...   \n2                               31.00              6000.0          70.0  ...   \n3                                9.27              8000.0          97.0  ...   \n4                                4.05             19000.0         100.0  ...   \n\n   Birthrate  Deathrate  Agriculture  Industry  Service  Rank  \\\n0      46.60      20.34        0.380     0.240    0.380   157   \n1      15.11       5.22        0.232     0.188    0.579    90   \n2      17.14       4.61        0.101     0.600    0.298    71   \n3      22.46       3.27        0.151     0.190    0.620    44   \n4       8.71       6.25        0.021     0.274    0.707    27   \n\n   Male Height in Cm  Female Height in Cm  Male Height in Ft  \\\n0             168.50               156.11               5.53   \n1             174.07               162.23               5.71   \n2             175.04               162.35               5.74   \n3             177.09               167.55               5.81   \n4             178.84               165.53               5.87   \n\n   Female Height in Ft  \n0                 5.12  \n1                 5.32  \n2                 5.33  \n3                 5.50  \n4                 5.43  \n\n[5 rows x 25 columns]"},"exec_count":34,"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"b515de","input":"merged_data.columns.values","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g-V3rFsb9wqS","outputId":"484d817d-3115-4d8c-f588-afc03ca46d22"},"output":{"0":{"data":{"text/plain":"array(['Country', 'Region', 'Population', 'Area (sq. mi.)',\n       'Pop. Density (per sq. mi.)', 'Coastline (coast/area ratio)',\n       'Net migration', 'Infant mortality (per 1000 births)',\n       'GDP ($ per capita)', 'Literacy (%)', 'Phones (per 1000)',\n       'Arable (%)', 'Crops (%)', 'Other (%)', 'Climate', 'Birthrate',\n       'Deathrate', 'Agriculture', 'Industry', 'Service', 'Rank',\n       'Male Height in Cm', 'Female Height in Cm', 'Male Height in Ft',\n       'Female Height in Ft'], dtype=object)"},"exec_count":35,"output_type":"execute_result"}},"pos":62,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"9bc191","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=merged_data.iloc[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"cWmp5PXU-DdN","outputId":"39683209-b66d-4e4c-f663-fb2214b0370c"},"output":{"0":{"data":{"image/png":"b5a8f824cdea23cdb81d308a3cee6dda8fef1d17","text/plain":"<Figure size 1152x864 with 2 Axes>"},"exec_count":36,"metadata":{"image/png":{"height":844,"width":1017},"needs_background":"light"},"output_type":"execute_result"}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"5b3eea","input":"GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\ngdp_data = merged_data[GDP_features]\nheight_features = ['Average Height in Ft', 'Agriculture', 'Service', 'Phones (per 1000)', 'GDP ($ per capita)', 'Literacy (%)']\navg_height_data = merged_data[height_features]","metadata":{"id":"73dEr1l__oTo"},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"6ecab5","input":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(16,16))\nplt.subplots_adjust(hspace=0.4)\n\ncorr_to_gdp = pd.Series(dtype='float64')\nfor col in gdp_data.columns.values:\n  if not col == 'GDP ($ per capita)':\n    corr_to_gdp[col] = gdp_data['GDP ($ per capita)'].corr(gdp_data[col])\nabs_corr_to_gdp = corr_to_gdp.abs().sort_values(ascending=False)\ncorr_to_gdp = corr_to_gdp.loc[abs_corr_to_gdp.index]\n\n\nfor i in range(3):\n    for j in range(3):\n        sns.regplot(x=corr_to_gdp.index.values[i*3+j], y='GDP ($ per capita)', data=gdp_data,\n                   ax=axes[i,j], fit_reg=False, marker='.')\n        title = 'correlation='+str(corr_to_gdp[i*3+j])\n        axes[i,j].set_title(title)\naxes[1,2].set_xlim(0,102)\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":948},"id":"4nYfQkD8_u-A","outputId":"793e94bd-ff77-49e9-938a-60ae5bf59cb7"},"output":{"0":{"data":{"image/png":"34d121e04feb4191d41b874243b726f994ce3a83","text/plain":"<Figure size 1152x1152 with 9 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"d3bef5","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=gdp_data.iloc[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"GH6QFOg2_qgZ","outputId":"1c634609-8653-427c-9bde-09f54445d47a"},"output":{"0":{"data":{"image/png":"6e0830f2aea7dbec80c176e8829692d2d114de11","text/plain":"<Figure size 1152x864 with 2 Axes>"},"exec_count":40,"metadata":{"image/png":{"height":844,"width":1010},"needs_background":"light"},"output_type":"execute_result"}},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"60459b","input":"def get_gdp_dataset(merged_data):\n  merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\n  merged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\n  merged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\n  GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\n  gdp_data = merged_data[GDP_features]\n  \n  return gdp_data","metadata":{"id":"J8w-jy_IAPQR"},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"c5ab54","input":"merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\nmerged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\nmerged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\nmerged_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"cE6CqEdr-G_k","outputId":"0253161b-d7df-4d68-c1d7-a5697b391932"},"output":{"0":{"ename":"KeyError","evalue":"\"['Male Height in Cm', 'Female Height in Cm'] not found in axis\"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-df71a1ca3a11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmerged_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Male Height in Cm'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Female Height in Cm'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Average Height in Ft'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Female Height in Ft'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Male Height in Ft'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmerged_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Male Height in Ft'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Female Height in Ft'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4946\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4947\u001b[0m         \"\"\"\n\u001b[0;32m-> 4948\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   4949\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4950\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4277\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4278\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4279\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, consolidate, only_slice)\u001b[0m\n\u001b[1;32m   4321\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4322\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4323\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4324\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4325\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6642\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6643\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6644\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{list(labels[mask])} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6645\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6646\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Male Height in Cm', 'Female Height in Cm'] not found in axis\""]}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"d8e49d","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=merged_data.iloc[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"d9Wz6RRW_fBO","outputId":"5e7226f1-a751-40a7-92b6-17c4d3e07109"},"output":{"0":{"data":{"image/png":"afe3f9cf515aaf609dfc70b93800d62ea7b1188e","text/plain":"<Figure size 1152x864 with 2 Axes>"},"exec_count":42,"metadata":{"image/png":{"height":844,"width":1017},"needs_background":"light"},"output_type":"execute_result"}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"66e6e6","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","metadata":{"id":"Dp2oCNZdAsuV"},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"492a9f","input":"# FUNCTIONS FROM SECTION 1\ndef merge_data(country_data, height_data):\n  height_data = height_data.rename(columns={\"Country Name\" : \"Country\"})\n  country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)\n  old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\n  new_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n              'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n              'Timor-Leste', 'Trinidad and Tobago']\n\n  for i in range(len(old_names)):\n    country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n  \n  merged_df = pd.merge(country_data, height_data, on=['Country'])\n  return merged_df\n\n\n\n# FUNCTIONS FROM SECTION 2\ndef rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region\n\ndef format_and_clean_data(merged_data):\n\n  merged_data['Region'] = merged_data.apply(lambda row : row.astype(str)['Region'].strip(), axis=1)\n  merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\n\n  for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n\n  return merged_data\n\n\n\n# FUNCTIONS FROM SECTION 3\ndef get_gdp_dataset(merged_data):\n  merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\n  merged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\n  merged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\n  GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\n  gdp_data = merged_data[GDP_features]\n  \n  return gdp_data","metadata":{"id":"B3LPfbwzAtq8"},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"01231d","input":"import numpy as np\nimport pandas as pd","metadata":{"id":"ahcMjdz61hGq"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"00f26e","input":"Some of the names are easy, such as 'Antigua & Barbuda' and 'Antigua and Barbuda', its just an issue of use a '&' instead of the word 'and'. For others, the country names are just in a different order. But some of them are more tricky. After some quick googling, I found that the country_data data set is using outdated names for some of the countries so we will have to fix that as well.","metadata":{"id":"fSk7QeQ15nUW"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"12ef4e","input":"For this section we will be adding seaborn and pyplot to our list of modules. We will be using seaborn to create a correlation map, or a vizualization of how each column is related to each other column, and for showing a scatter plot of two columns. If you don't understand what either of those things are, thats okay, it will make more sense when you see it in action. We will be using pyplot to show the charts and maps that we make with seaborn.","metadata":{"id":"gtpyzrzr8pEt"},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"172411","input":"But, in an effort to be thorough, we will use the following loops to figure out if there are any country names that are in one data set but not the other. The first block will show the countries that are in the country_data data set but not the height_data data set and the second block will show what countries are in the height_data data set but not the country_data data set","metadata":{"id":"EUATSbgq5CYl"},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"1aae85","input":"For now, I'll leave in all of the correlated data points so that we can see how this affects different models down the line. I'll put all of the data that I want to use for my model into its own dataset so that it will be easier to keep track of","metadata":{"id":"Twr-5rVv_mOw"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"1ba0db","input":"What this means for our datasets is that theres either a different naming convention between the datasets or theres a problem with how we loaded the data, so we're going to output all of the unique values for the country column in both of the datasets","metadata":{"id":"V7xkW3mT4aVT"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"1edb22","input":"We wont need any new imports from what we had in the last section","metadata":{"id":"PQQY9V6W7sYE"},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"282006","input":"And we should now see that the country_data data set has country names that match our height_data country names","metadata":{"id":"jnM6IRIs4vad"},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"2c219d","input":"Lets take a moment to look over the heatmap and keep track of which columns can be combined and come up with a reason for why we think that.","metadata":{"id":"ApvTy9RG-AGL"},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"3627a5","input":"Now that our data is ready to go again, its time to analyze it and pick out the most important parts. For most machine learning models, it is very important to reduce the number of unique datapoints we give to it. ","metadata":{"id":"h7ijOdLb9uBb"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"3f9e7e","input":"# **Section 3**: Visualizing the data and PCA\n\n> In this section we will cover:\n*   What imports we will need\n*   how to vizualize the data\n*   How to pick out the data that you want\n*   How to combine columns together to reduce the complexity of the data","metadata":{"id":"EWbNdlDg8UFW"},"pos":53,"type":"cell"}
{"cell_type":"markdown","id":"48f247","input":"We want to merge the datasets based on the name of the country, but the datasets have different columns for the name of the country, \"Country Name\" and \"Country\". So we rename the height data's column to match the country data's column","metadata":{"id":"IK_tkB6b3oKT"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"4bb47f","input":"So now we need to remove the last character from the name of each of our countries in the countries dataset. This may sound like a daunting task, but pandas has a great way to apply a function to every row of a dataset. We will be using two pieces of information to accomplish our goal. First, in python strings can be treated as lists, and as such, we can use index slicing to get all but the last character of the string. You can read more about index slicing here: https://realpython.com/lessons/indexing-and-slicing/. Our second important piece of information is that we can use a lambda to create a function in 1 line that will apply a line of code to each row of our column. you can read more about lambda functions here: https://www.w3schools.com/python/python_lambda.asp.","metadata":{"id":"qyGRk44M4k2N"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"560ddf","input":"We'll notice that there's quite a few country names that are unique to each data set so it is our job to figure out why that is and do something to fix it","metadata":{"id":"GpdWniIA5dRK"},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"616e99","input":"In order to fill in the missing data. I chose to take the median value of the countries in the region and use them in place of the missing data. The climate is a special case because it is categorical, meaning that it should be a whole number that corresponds to a particular climate.","metadata":{"id":"eS36SoHR8F9V"},"pos":48,"type":"cell"}
{"cell_type":"markdown","id":"62bd90","input":"\nThe key take aways are that we can apply a function to every row of our dataset with the \"apply\" function, we can create a function in one line using a lambda, and we can cut off the last character of a string with index slicing","metadata":{"id":"7F1Bnf474oc1"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"66afd9","input":"Once again, we will be combining everything into functions that we can take with us to later sections and later notebooks","metadata":{"id":"wfuE_104AQTh"},"pos":77,"type":"cell"}
{"cell_type":"markdown","id":"73fb68","input":"# **Section 1**: Loading and merging the data\n\n> In this section we will cover:\n*   What imports we will need\n*   How to load a CSV file\n*   How to merge CSV files\n*   How to deal with any merging conflicts you may encounter\n\n\n\n","metadata":{"id":"AFpGnMem14HH"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"77613b","input":"The first and most obvious datapoints that can be combined are Male Height in Cm, Female Height in Cm, Male Height in Ft, and Female Height in Ft because they are highly correlated and we can come up with a clear reason as to why they are correlated. I'll go ahead and drop the Cm measurement and then average the height of males and females into a single value.","metadata":{"id":"ybWF62AC-Hnq"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"803af1","input":"In addition to the head() function, we can use the info() function to get a more general overview of the data. Including how many data entries there are, the data type of each column and how many non null values there are.","metadata":{"id":"dXfz0VKj3--q"},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"85f007","input":"Now lets go ahead and plot out each of the GPD values compared to each of the columns we slected above to get a better idea of what the data looks like. We will keep the GDP on the Y-axis and the value we are comparing it to on the X-axis","metadata":{"id":"Jv5CBQ1e_yXk"},"pos":75,"type":"cell"}
{"cell_type":"markdown","id":"8831e3","input":"When reading the heatmap, you should know that positive numbers indicate that the two datapoints are strongly positvely correlated meaning that as one datapoint increases, the other usually increases. Negative numbers indicate that the two datapoints are strongly negatively correlated meaning that as one datapoint increases, the other usually decreases. Finally, numbers close to zero indicate that there is little to no correlation between the two datapoints meaning that as one increases, the other is just as likely to increase as it is to decrease.","metadata":{"id":"iyl4dl6Z990Q"},"pos":63,"type":"cell"}
{"cell_type":"markdown","id":"8a76f4","input":"Lets go ahead and turn everything we did into a function that we can take with us into future sections","metadata":{"id":"ePTmTYf86sBr"},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"8d77c5","input":"## **Section 2**: Cleaning the data\n\n> In this section we will cover:\n*   What imports we will need\n*   How to rename specific variables in specific rows\n*   What to do about null values","metadata":{"id":"MMtYZZk369-A"},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"8f94ea","input":"We will start with a clean data set to avoid any previous sections impacting this one","metadata":{"id":"2sqOg_wU9jh_"},"pos":57,"type":"cell"}
{"cell_type":"markdown","id":"9cd228","input":"We want to do the same thing for our models to help them make the best decisions possible. In general, data that is highly correlated can be reduced to a single piece of data. Below are all of the pieces of data that we are keeping track of and a correlation heatmap that we can use the help us decide what should be combined.","metadata":{"id":"XyrRPt-b92cR"},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"a18fec","input":"","metadata":{"id":"WHhdqby41hrr"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"a31fa6","input":"Now we should see that the data we chose is correlated with the data we are trying to guess, meaning that the data we chose is a good predictor for the data we are trying to guess.","metadata":{"id":"ezkHuHjc_qBC"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"a57019","input":"You may notice that in the country dataset, there is an extra space after each of the names. This means that none of the names match between the two datasets resulting in our empty merged dataset","metadata":{"id":"_6JV-TBZ4kQL"},"pos":20,"type":"cell"}
{"cell_type":"markdown","id":"a6a0bd","input":"Uh oh, our merged dataset is empty. An important thing to note about the merge function is that it drops none matching values from the new dataset, or in other words, if it can't find a matching value in both datasets, it drops the whole row.","metadata":{"id":"iKWZ73qP4ad3"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"b9e7c6","input":"We see theres a few null objects in our dataset, namely the climate","metadata":{"id":"t4I-dio98JpB"},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"bdf96b","input":"To understand why we do this, first image that you are acting as the model. Lets say your job is to determine if you should bring an umbrella with you on any given day. Would you rather be given the air pressure, average temerature, wind speed, wind direction, humidity and time of year or would you rather be given the % chance that it will rain? Obviously you'd rather just have the % chance of rain because it gives you all the information you need to know in the least amount of space making it easy for you to make a decision.","metadata":{"id":"25BYyN5E9xyR"},"pos":60,"type":"cell"}
{"cell_type":"markdown","id":"cd6cd8","input":"First and foremost, we will be using pandas to handel all of our data managment needs. We will see it in action soon enough but just know that if we're dealing directly we data, we'll probably be using this. Next, we will be importing numpy. Numpy is what we will be using for a majority of our math related problems, such as dividing a row of data by a number.","metadata":{"id":"FBFHOuj-2lXZ"},"pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d90cf6","input":"We will be covering what imports we need at the top of each section, however there will be two code blocks at the bottom that include all of the imports and all of the functions that we create throughout our data exploration","metadata":{"id":"NxLbHXRU2Wgv"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"ddc9c5","input":"Now that the data is a bit simpler, we will start to pick out which features we want to use to answer our questions. Lets look at the correlation heatmap again and decide which features we should use to calculate how wealthy a country is and which features to use to calculate the average height of a country.","metadata":{"id":"jsroWxRm_eWa"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"e66d7e","input":"# **Section 4**: All of the functions and imports we need\n\n> Here are all of the modules and functions we used throughout this notebook","metadata":{"id":"b4eAQrhZAd24"},"pos":79,"type":"cell"}
{"cell_type":"markdown","id":"e6f525","input":"## Welcome to AI Camp's Data Science curriculum!\n\n> This notebook will cover everything you need to know to open, combine, modify, and vosialize your data. It will be broken up into three major sections. The first section will cover loading the datasets and handling any merging issues that may arrise. The second section will cover how to format the data and fill in any null values that you may have. The third section will cover how to visualize the data and use that visualization to pick out the most important data points to use.\n\n","metadata":{"id":"rqi2WVKN0tcH"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"e7e8c0","input":"Now we'll go ahead and load up our data. For this, make sure that the text inside of the airquotes is a path to the data that you want to load. Once we have it loaded in, we will use the head() function to get a preview of what the data will look like","metadata":{"id":"dAOb-36o3NRD"},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"f3de34","input":"Now lets combine everything into a single function like we did in the previous notebook so that we can bring it with us to the next one","metadata":{"id":"pbHW_oW68AO5"},"pos":51,"type":"cell"}
{"cell_type":"markdown","id":"f6de2d","input":"Before you start this setion, create a list of a few different questions that you could answer with the data that we have collected. For example, with the dataset that I've been using, I want to know the best way to figure out if a nation is wealthy or not and I want to know how different factors influce a person's height.","metadata":{"id":"8tCyHF0E8oPo"},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"f7e2ca","input":"For my data, I simply chose the data points that had a noticable correlation with the data I was interested in. This will certainly lead to problems in the different models due to them only looking at correlation and not causation. For example, average height is correlated with number of phones so our model could reasonably assume that the more phones a person buys, the tallers they will get. This obviously doesn't make sense to us but in more complicated problems it can be easy to include unnecessary data. For examples of this happening in the real world, look at https://www.tylervigen.com/spurious-correlations","metadata":{"id":"bkmsY49s_jce"},"pos":70,"type":"cell"}
{"cell_type":"markdown","id":"fa7b65","input":"Fantastic! Next we merge the two datasets based on the \"Country\" column and print out the first 5 entries","metadata":{"id":"ED-5AVXp30zY"},"pos":14,"type":"cell"}
{"id":0,"time":1660140506905,"type":"user"}
{"last_load":1660140506881,"type":"file"}